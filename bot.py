import random
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from datetime import datetime

API_TOKEN = '' # –¥–æ–¥–∞–π—Ç–µ —Å–≤—ñ–π –∫–ª—é—á

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_state = {}

# –ú–∞–ø–∞ ID -> –Ü–º‚Äô—è
USER_NAMES = {
    # –¥–æ–¥–∞–π—Ç–µ –∑–Ω–∞–π–æ–º–∏—Ö –ª—é–¥–µ–π
}

def log_message(message: str, level: str = "LOG", user_id: int = None):
    time_str = datetime.now().strftime("%H:%M")

    # –ö–æ–ª—å–æ—Ä–∏ ANSI
    colors = {
        "LOG": "\033[94m",       # —Å–∏–Ω—ñ–π
        "–ü–û–ú–ò–õ–ö–ê": "\033[91m",   # —á–µ—Ä–≤–æ–Ω–∏–π
        "MAIN": "\033[1;36m",    # —Å–≤—ñ—Ç–ª–æ —Å–∏–Ω—ñ–π
        "–Ü–ú–Ø": "\033[95m",      # —Ñ—ñ–æ–ª–µ—Ç–æ–≤–∏–π
        "–ß–ê–°": "\033[92m",       # –∑–µ–ª–µ–Ω–∏–π
        "END": "\033[0m"         # —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∏–ª—é
    }

    # –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–º'—è –∞–±–æ ID
    name = USER_NAMES.get(user_id, str(user_id)) if user_id is not None else "?"

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
    header = f"{colors.get(level, '')}[{level}]{colors['–ß–ê–°']}[{time_str}]{colors['END']}"
    name_str = f"{colors['–Ü–ú–Ø']}[{name}]{colors['END']}"
    
    print(f"{header}{name_str} –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message}")

# –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
start_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–û–±—Ä–∞—Ç–∏ —Ç–µ–º—É")]],
    resize_keyboard=True
)

# –î–ª—è –ø—Ä–∏–∫–ª–∞–¥—É
topic_display_map = {
    "Exam/ex1" : "1. –§—ñ–∑—ñ–æ–ª–æ–≥—ñ—è –∑–±—É–¥–ª–∏–≤–∏—Ö —Ç–∫–∞–Ω–∏–Ω",
    "Exam/ex2" : "2. –ù–µ—Ä–≤–æ–≤–∞ —Ä–µ–≥—É–ª—è—Ü—ñ—è —Ä—É—Ö–æ–≤–∏—Ö —ñ —Ç.–¥ :)",
    "Exam/ex3" : "3. –§—ñ–∑—ñ–æ–ª–æ–≥—ñ—è –ê–ù–°",
    "Exam/ex4" : "4. –§—ñ–∑—ñ–æ–ª–æ–≥—ñ—è —Å–µ–Ω—Å–æ—Ä–Ω–∏—Ö —Å–∏—Å—Ç–µ–º",
    "Exam/ex5" : "5. –§—ñ–∑—ñ–æ–ª–æ–≥—ñ—è –µ–Ω–¥–æ–∫—Ä–∏–Ω–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏",
    "Exam/ex6" : "6. –ï–Ω–µ—Ä–≥–µ—Ç–∏—á–Ω–∏–π –æ–±–º—ñ–Ω. —ñ —Ç.–¥.",
    "Exam/ex7" : "7. –§—ñ–∑—ñ–æ–ª–æ–≥—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∫—Ä–æ–≤—ñ",
    "Exam/ex8" : "8. –§—ñ–∑—ñ–æ–ª–æ–≥—ñ—è –¥–∏—Ö–∞–Ω–Ω—è",
    "Exam/ex9_h1" : "9. (–ü–µ—Ä—à–∞ —á–∞—Å—Ç–∏–Ω–∞)",
    "Exam/ex9_h2" : "9. (–î—Ä—É–≥–∞ —á–∞—Å—Ç–∏–Ω–∞)",
    "Exam/ex9" : "9. –§—ñ–∑—ñ–æ–ª–æ–≥—ñ—è —Å–µ—Ä—Ü–µ–≤–æ-—Å—É–¥–∏–Ω–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏",
    "Exam/ex10" : "10. –§—ñ–∑—ñ–æ–ª–æ–≥—ñ—è —Å–∏—Å—Ç–µ–º–∏ —Ç—Ä–∞–≤–ª–µ–Ω–Ω—è",
    "Exam/ex11" : "11. –§—ñ–∑—ñ–æ–ª–æ–≥—ñ—è –≤–∏–¥—ñ–ª–µ–Ω–Ω—è",
    "Exam/exAll" : "–í—Å—ñ —Ç–µ–º–∏ —Ä–∞–∑–æ–º"
}

@dp.message(CommandStart())
async def handle_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è:", reply_markup=start_kb)

@dp.message(F.text == "–û–±—Ä–∞—Ç–∏ —Ç–µ–º—É")
async def handle_choose_topic(message: types.Message):
    inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=name, callback_data=f"topic_{key}")]
            for key, name in topic_display_map.items()
        ]
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ —Ç–µ–º:", reply_markup=inline_kb)

@dp.callback_query(F.data.startswith("topic_"))
async def handle_topic_selected(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    topic_key = callback.data.split("_", 1)[1]
    topic_name = topic_display_map.get(topic_key, topic_key)
    log_message(f"–æ–±—Ä–∞–≤ —Ç–µ–º—É: {topic_key}", "LOG", user_id)

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–†–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è", callback_data=f"start_test_{topic_key}")],
            [InlineKeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_topics")]
        ]
    )
    await callback.message.edit_text(f"–û–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: {topic_name}", reply_markup=markup)

@dp.callback_query(F.data == "back_to_topics")
async def handle_back(callback: types.CallbackQuery):
    await handle_choose_topic(callback.message)

@dp.callback_query(F.data.startswith("start_test_"))
async def handle_start_test(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    topic_key = callback.data.split("_", 2)[2]
    topic_name = topic_display_map.get(topic_key, topic_key)
    log_message(f"–ø–æ—á–∞–≤ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ —Ç–µ–º–∏: {topic_key}", "LOG", user_id)

    user_state[user_id] = {"topic": topic_key} 

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ –ø–æ—Ä—è–¥–∫—É", callback_data="mode_order")],
        [InlineKeyboardButton(text="–†–∞–Ω–¥–æ–º–Ω–æ", callback_data="mode_random")],
        [InlineKeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_topics")]
    ])

    await callback.message.edit_text(
        f"–ü–æ—á–∏–Ω–∞—î–º–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ —Ç–µ–º–∏: {topic_name}\n\n–Ø–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ —Ç–µ—Å—Ç—ñ–≤ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?",
        reply_markup=markup
    )

@dp.callback_query(F.data.in_(["mode_order", "mode_random"]))
async def start_test_session(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    topic = user_state[user_id]["topic"]
    db_name = f"DataBases/{topic}.db" # HERE ADDED A NEW WAY 'DATABASES/'
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM questions")
    questions = cursor.fetchall()
    conn.close()

    if callback.data == "mode_random":
        random.shuffle(questions)

    user_state[user_id]["questions"] = questions
    user_state[user_id]["current_index"] = 0
    user_state[user_id]["score"] = 0  # <--- –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    user_state[user_id]["total"] = len(questions)  # <--- –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å
    await send_question(callback.message, user_id)

def shuffle_answers(row):
    answers = [row[2], row[3], row[4], row[5], row[6]]
    correct_index = row[7] - 1  # –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è
    indexed_answers = list(enumerate(answers, 1))
    random.shuffle(indexed_answers)

    # –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è
    for num, text in indexed_answers:
        if text == answers[correct_index]:
            new_correct = num
            break

    return indexed_answers, new_correct

async def send_question(message, user_id):
    data = user_state[user_id]
    index = data["current_index"]
    questions = data["questions"]
    
    if index >= len(questions):
        log_message(f"–ø—Ä–æ–π—à–æ–≤ —Ç–µ–º—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {user_state[user_id].get('score', 0)} / {user_state[user_id].get('total', 0)}", "LOG", user_id)
        score = user_state[user_id].get("score", 0)
        total = user_state[user_id].get("total", 0)
        await message.answer(f"–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ\n\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: *{score} / {total}*", parse_mode="Markdown")
        return

    row = questions[index]
    
    # üÜï –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä–µ–º—ñ—à–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—ñ—Å–ª—è —Ç–∞—Å—É–≤–∞–Ω–Ω—è
    shuffled, new_correct = shuffle_answers(row)
    data["shuffled"] = shuffled
    data["correct"] = new_correct

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=ans[1], callback_data=f"answer_{ans[0]}")]
        for ans in shuffled
    ])

    text = row[1].replace("\\n", "\n")
    question_text = f"*({index + 1}/{len(questions)})* {text}"
    await message.answer(question_text, reply_markup=markup, parse_mode="Markdown")

@dp.callback_query(F.data.startswith("answer_"))
async def handle_answer(callback: types.CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id

    try:
        data = user_state[user_id]
    except KeyError:
        # –õ–æ–≥ —É –∫–æ–Ω—Å–æ–ª—å
        log_message("–Ω–∞–º–∞–≥–∞–≤—Å—è –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏, –∞–ª–µ –¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ (–±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ)", "–ü–û–ú–ò–õ–ö–ê", user_id)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await callback.message.answer("–°–µ—Å—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ üòï\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –∑–∞–Ω–æ–≤–æ:")
        await handle_choose_topic(callback.message)
        return  # –∑—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è

    chosen = int(callback.data.split("_")[1])
    correct = data["correct"]

    correct_text = next(text for num, text in data["shuffled"] if num == correct)

    if chosen == correct:
        user_state[user_id]["score"] += 1  # <--- –¥–æ–¥–∞–π –¥–æ —Ä–∞—Ö—É–Ω–∫—É
        await callback.message.answer(
            f"–í–∏ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ. –í—ñ–¥–ø–æ–≤—ñ–¥—å:\n*{correct_text}*",
            parse_mode="Markdown"
        )
    else:
        await callback.message.answer(
            f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ ‚ùå. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:\n*{correct_text}*",
            parse_mode="Markdown"
        )

    data["current_index"] += 1
    await send_question(callback.message, user_id)
    await callback.message.edit_reply_markup(reply_markup=None)

async def main():
    try:
        await dp.start_polling(bot)
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É.")

if __name__ == "__main__":
    try:
        log_message(f"–ë–æ—Ç –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ", "MAIN")
        asyncio.run(main())
    except KeyboardInterrupt:
        log_message(f"–ë–æ—Ç –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–º–∫–Ω–µ–Ω–æ", "MAIN") #174